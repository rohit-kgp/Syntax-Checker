#include <bits/stdc++.h>
using namespace std;

int main()
{
    int m, n;
    cin >> m >> n;  // m = no. of edges, n = no. of nodes;
    vector<pair<int, int>> adj[n];      // pair = (node, weight)
    int u, v, wt;
    // Taking Input for weighted graph
    for (int i = 0; i < m; i++)
    {
        cin >> u >> v >> wt;
        adj[u].push_back(make_pair(v, wt));
        adj[v].push_back(make_pair(u, wt));
    }
    int source;
    cin >> source;

    // Dijkstra's Algorithm
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // pq : (distance from source, node)
    vector<int> distTo(n, INT_MAX);
    distTo[source] = 0;
    pq.push(make_pair(0, source));
    
    while (!pq.empty()
    {
        int dist = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        for (auto ele : adj[node])
        {
            int next_node = ele.first;
            int weight = ele.second;

            if (distTo[next_node] > distTo[node] + weight)
            {
                distTo[next_node] = distTo[node] + weight;
                pq.push(make_pair(distTo[next_node], next_node));
            }
        }
    }

    cout << Distances are :" << endl;
    for (auto ele : distTo)
    
        cout << ele << " ";
    }
    return 0;
}